//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""c20c8db6-4b54-4bf7-864c-bde4876828f2"",
            ""actions"": [
                {
                    ""name"": ""DorsoVentralMovement"",
                    ""type"": ""Value"",
                    ""id"": ""3549fd4c-e906-4616-bb3f-3b88f5530e67"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""82cdf74f-5f7e-491b-9000-678006d6b4a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fc24e6f4-bb54-41d3-9e55-1f08b551bad6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DorsoVentralMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2ed0672d-d00a-426e-a0df-4cf9f65102cd"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DorsoVentralMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f8e4c6f8-0785-4e7d-be33-c603e4493e66"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DorsoVentralMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a8ea6399-ce03-4a04-ae84-9349312778b5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DorsoVentralMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""49e4ea73-85bd-4ec7-9934-46e60441a62b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""DorsoVentralMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e5c954e9-2a23-47c5-ad86-188a86f4dfb7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""DorsoVentralMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b7c0fc3d-2953-40b0-b36c-c7dc3d6f11d9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6eda72cf-45f2-47f6-9aed-f48d61d97770"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1c007ceb-0782-46c1-890e-e4eeb30adca8"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""aa9827fb-69e0-430e-8d96-b65600bc330c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8cf64894-c29a-4eab-99e0-d0e9d301632e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""965ea225-94e3-405e-b62f-59fdbe61ca2d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Skills"",
            ""id"": ""5190815d-5dc1-4d1d-9006-998615d8e455"",
            ""actions"": [
                {
                    ""name"": ""UseSkill"",
                    ""type"": ""Button"",
                    ""id"": ""1fde211d-d967-4d00-b6ea-aadd82a6e8e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextSkill"",
                    ""type"": ""Button"",
                    ""id"": ""29a9a74a-c660-4c5c-b9c8-8e36818d3944"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousSkill"",
                    ""type"": ""Button"",
                    ""id"": ""7dafae3f-981c-470e-a08f-0726a8ad00b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""36880e1b-e7a4-4cad-8611-2ceef621a224"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""UseSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c02b5a25-db49-4ade-9a88-fc07ce5d5786"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UseSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3783fc0-fa80-4e57-9997-62f3c505ce5b"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NextSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a80f84a6-868e-4163-8989-f8c802060208"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""NextSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59ac9ad1-e7e7-4486-9706-52674976b7fa"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""PreviousSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b689868f-0d15-4099-8de9-4f75d7782175"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PreviousSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_DorsoVentralMovement = m_Movement.FindAction("DorsoVentralMovement", throwIfNotFound: true);
        m_Movement_Rotation = m_Movement.FindAction("Rotation", throwIfNotFound: true);
        // Skills
        m_Skills = asset.FindActionMap("Skills", throwIfNotFound: true);
        m_Skills_UseSkill = m_Skills.FindAction("UseSkill", throwIfNotFound: true);
        m_Skills_NextSkill = m_Skills.FindAction("NextSkill", throwIfNotFound: true);
        m_Skills_PreviousSkill = m_Skills.FindAction("PreviousSkill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_DorsoVentralMovement;
    private readonly InputAction m_Movement_Rotation;
    public struct MovementActions
    {
        private @InputActions m_Wrapper;
        public MovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DorsoVentralMovement => m_Wrapper.m_Movement_DorsoVentralMovement;
        public InputAction @Rotation => m_Wrapper.m_Movement_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @DorsoVentralMovement.started += instance.OnDorsoVentralMovement;
            @DorsoVentralMovement.performed += instance.OnDorsoVentralMovement;
            @DorsoVentralMovement.canceled += instance.OnDorsoVentralMovement;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @DorsoVentralMovement.started -= instance.OnDorsoVentralMovement;
            @DorsoVentralMovement.performed -= instance.OnDorsoVentralMovement;
            @DorsoVentralMovement.canceled -= instance.OnDorsoVentralMovement;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Skills
    private readonly InputActionMap m_Skills;
    private List<ISkillsActions> m_SkillsActionsCallbackInterfaces = new List<ISkillsActions>();
    private readonly InputAction m_Skills_UseSkill;
    private readonly InputAction m_Skills_NextSkill;
    private readonly InputAction m_Skills_PreviousSkill;
    public struct SkillsActions
    {
        private @InputActions m_Wrapper;
        public SkillsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseSkill => m_Wrapper.m_Skills_UseSkill;
        public InputAction @NextSkill => m_Wrapper.m_Skills_NextSkill;
        public InputAction @PreviousSkill => m_Wrapper.m_Skills_PreviousSkill;
        public InputActionMap Get() { return m_Wrapper.m_Skills; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkillsActions set) { return set.Get(); }
        public void AddCallbacks(ISkillsActions instance)
        {
            if (instance == null || m_Wrapper.m_SkillsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SkillsActionsCallbackInterfaces.Add(instance);
            @UseSkill.started += instance.OnUseSkill;
            @UseSkill.performed += instance.OnUseSkill;
            @UseSkill.canceled += instance.OnUseSkill;
            @NextSkill.started += instance.OnNextSkill;
            @NextSkill.performed += instance.OnNextSkill;
            @NextSkill.canceled += instance.OnNextSkill;
            @PreviousSkill.started += instance.OnPreviousSkill;
            @PreviousSkill.performed += instance.OnPreviousSkill;
            @PreviousSkill.canceled += instance.OnPreviousSkill;
        }

        private void UnregisterCallbacks(ISkillsActions instance)
        {
            @UseSkill.started -= instance.OnUseSkill;
            @UseSkill.performed -= instance.OnUseSkill;
            @UseSkill.canceled -= instance.OnUseSkill;
            @NextSkill.started -= instance.OnNextSkill;
            @NextSkill.performed -= instance.OnNextSkill;
            @NextSkill.canceled -= instance.OnNextSkill;
            @PreviousSkill.started -= instance.OnPreviousSkill;
            @PreviousSkill.performed -= instance.OnPreviousSkill;
            @PreviousSkill.canceled -= instance.OnPreviousSkill;
        }

        public void RemoveCallbacks(ISkillsActions instance)
        {
            if (m_Wrapper.m_SkillsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISkillsActions instance)
        {
            foreach (var item in m_Wrapper.m_SkillsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SkillsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SkillsActions @Skills => new SkillsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnDorsoVentralMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface ISkillsActions
    {
        void OnUseSkill(InputAction.CallbackContext context);
        void OnNextSkill(InputAction.CallbackContext context);
        void OnPreviousSkill(InputAction.CallbackContext context);
    }
}
